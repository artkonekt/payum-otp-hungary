<?php
/**
 * Contains class Configurator
 *
 * @copyright   Copyright (c) 2016 Storm Storez Srl-D
 * @author      Lajos Fazakas
 * @license     MIT
 * @since       2016-03-15
 * @version     2021-01-13
 */

namespace Konekt\PayumOtp\Bridge\OtpSdk4;

/**
 * Abstracts the configuration of the gateway and provides a mechanism to simplify
 * the configuration of the OTP SDK. The SDK requires the configs to be written
 * to files and to define some constants. This class writes these conf files
 * on the fly, so you can configure the gateway the Payum way, via arrays
 */
class Configurator
{
    const CONFIG_FILE_NAME = 'otp_webshop_client.conf';

    /**
     * @var string The directory of the SDK dir
     */
    private $sdkLibDir;

    /**
     * @var string The private key file
     */
    private $privateKeyFileName;

    /**
     * @var string The pos_id for which you make the payment (aka. SHOP ID)
     */
    private $posId;

    /**
     * @var string The prefix for the unique ID generated for each capture.
     */
    private $transactionIdPrefix;

    /** @var bool */
    private $isSandbox = false;

    /**
     * Configurator constructor.
     *
     * @param array $config
     */
    public function __construct($config)
    {
        $this->privateKeyFileName = $config['secret_key'];
        $this->sdkLibDir = $config['sdk_dir'] . '/lib';
        $this->posId = $config['pos_id'];
        $this->transactionIdPrefix = $config['transactionid_prefix'];
        $this->isSandbox = (bool) $config['sandbox'] ?? false;

        //the config file used by the SDK will be in the temp dir
        $confFileDir = sys_get_temp_dir();
        $this->generateConfigFile($confFileDir, $config);

        $this->defineSdkConstants($confFileDir);
    }

    /**
     * Generates the config file used by the SDK with the values given in the configuration of the gateway.
     *
     * @param string $dir    The destination directory of the generated config file.
     *
     * @param array  $config The gateway's configuration
     */
    private function generateConfigFile($dir, $config)
    {
        $originalConfigFile = $this->sdkLibDir . '/../config/' . self::CONFIG_FILE_NAME;

        $contents = file_get_contents($originalConfigFile);

        //private keyfile config
        if ('#02299991' == $this->posId) {
            $contents = preg_replace('/otp\.webshop\.PRIVATE_KEY_FILE_#02299991=.*/', 'otp.webshop.PRIVATE_KEY_FILE_#02299991=' . $this->privateKeyFileName, $contents);
        } else {
            $contents = preg_replace('/otp\.webshop\.PRIVATE_KEY_FILE.*/', 'otp.webshop.PRIVATE_KEY_FILE_' . $this->posId . '=' . $this->privateKeyFileName, $contents);
        }

        if ($this->isSandbox()) {
            $contents = preg_replace('/otp\.webshop\.OTPMW_SERVER_URL=.*/', 'otp.webshop.OTPMW_SERVER_URL="https://sandbox.simplepay.hu/mw/mw/pspHU"', $contents);
        } else {
            $contents = preg_replace('/otp\.webshop\.OTPMW_SERVER_URL=.*/', 'otp.webshop.OTPMW_SERVER_URL="https://securepay.simplepay.hu/mw/mw/pspHU"', $contents);
        }

        //log directory for the transactions keyfile config
        if (isset($config['sdk_transaction_log_dir'])) {
            $contents = preg_replace('/otp\.webshop\.sdk_transaction_log_dir=.*/', 'otp.webshop.sdk_transaction_log_dir=' . $config['sdk_transaction_log_dir'], $contents);
        }

        if (isset($config['sdk_transaction_log_dir.success'])) {
            $contents = preg_replace('/otp\.webshop\.sdk_transaction_log_dir\.SUCCESS_DIR=.*/', 'otp.webshop.sdk_transaction_log_dir.SUCCESS_DIR=' . $config['sdk_transaction_log_dir.success'], $contents);
        }

        if (isset($config['sdk_transaction_log_dir.failed'])) {
            $contents = preg_replace('/otp\.webshop\.sdk_transaction_log_dir\.FAILED_DIR=.*/', 'otp.webshop.sdk_transaction_log_dir.FAILED_DIR=' . $config['sdk_transaction_log_dir.failed'], $contents);
        }

        //log directory for the webshopclient

        if (isset($config['sdk_log4php_file'])) {
            $contents = preg_replace('/log4php\.appender\.WebShopClient\.File=.*/', 'log4php.appender.WebShopClient.File=' . $config['sdk_log4php_file'], $contents);
        }

        file_put_contents($dir . '/' . self::CONFIG_FILE_NAME, $contents);


    }

    /**
     * Returns the full path to the SDK's service file.
     *
     * @return string
     */
    public function getMainServiceFile()
    {
        return $this->sdkLibDir . '/iqsys/otpwebshop/WebShopService.php';
    }

    /**
     * Returns the pos_id (aka. shop id)
     *
     * @return mixed
     */
    public function getPosId()
    {
        return $this->posId;
    }

    /** @return bool */
    public function isSandbox()
    {
        return $this->isSandbox;
    }

    /**
     * Returns whether the transactionId is should be generated by the application vs generated by OTP.
     *
     * TODO: make this configurable
     *
     * @return bool
     */
    public function useOwnTransactionId()
    {
        return true;
    }

    /**
     * Returns the prefix of the unique transaction ID.
     *
     * @return string
     */
    public function getTransactionIdPrefix()
    {
        return $this->transactionIdPrefix;
    }

    /**
     * Defines constants used by the SDK's code.
     *
     * @param string $confFileDir
     */
    private function defineSdkConstants($confFileDir)
    {
        define('WEBSHOP_LIB_DIR', $this->sdkLibDir);
        define('WEBSHOP_CONF_DIR', $confFileDir);
        define('WS_CUSTOMERPAGE_CHAR_ENCODING', 'UTF-8');
    }
}
